<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FPGA on Lap Blog</title>
    <link>https://iblogging.github.io/categories/fpga/</link>
    <description>Recent content in FPGA on Lap Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2022 11:00:00 +0000</lastBuildDate><atom:link href="https://iblogging.github.io/categories/fpga/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture of reconfigurable systems</title>
      <link>https://iblogging.github.io/post/2022-09-29-architecture-of-reconfigurable-systems/</link>
      <pubDate>Wed, 28 Sep 2022 11:00:00 +0000</pubDate>
      
      <guid>https://iblogging.github.io/post/2022-09-29-architecture-of-reconfigurable-systems/</guid>
      <description>Introduction This is my notes on studying Architecture of reconfigurable systems from Prof Jordane Lorandel. The course includes 03 main parts:
FPGA introduction SoC introduction Partial Reconfiguration introduction </description>
    </item>
    
    <item>
      <title>Architecture of reconfigurable systems - FPGA</title>
      <link>https://iblogging.github.io/post/2022-09-29-fpga/</link>
      <pubDate>Wed, 28 Sep 2022 11:00:00 +0000</pubDate>
      
      <guid>https://iblogging.github.io/post/2022-09-29-fpga/</guid>
      <description>Digital Hardware Design: Two approaches An introduction to FPGAs FPGAs Reconfigurable Mean not defined after manufacture, could be specified by the programmers themselves Configuration types Static Reconfiguration Load the whole bitstream on the FPGA Stop the execution to do the loading Static Partial Reconfiguration Only a portion of the bitstream is loaded on the FPGA Stop the execution to load the partial iage but the wait time is much shorter Dynamic Partial Reconfiguration Part of the FPGA is reconfigured while the rest is still running How is ensure reconfiguration?</description>
    </item>
    
    <item>
      <title>Study Verilog - Part 1</title>
      <link>https://iblogging.github.io/post/2022-09-29-verilog-part-1/</link>
      <pubDate>Wed, 28 Sep 2022 10:00:00 +0000</pubDate>
      
      <guid>https://iblogging.github.io/post/2022-09-29-verilog-part-1/</guid>
      <description>Introduction In the early days of integrated circuits, engineers had to sit down and physically draw transistors and their connections on paper to design them such that it can be fabricated on silicon.
Bigger and complex circuits demanded more engineers, time and other resources and soon enough there was a need to have a better way of designing integrated circuits.
VHDL was soon developed to enhance the design process by allowing engineers to describe functionality of the desired hardware and let automation tools convert that behavior into actual hardware elements like combinational gates and sequential logic.</description>
    </item>
    
  </channel>
</rss>
