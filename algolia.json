[{"author":null,"categories":["FPGA"],"content":"Verilog Arrays and Memories","date":1664394300,"description":"Verilog Arrays and Memories","dir":"post/","excerpt_html":"Verilog Arrays and Memories","excerpt_text":"Verilog Arrays and Memories","expirydate":-62135596800,"fuzzywordcount":500,"html":"Verilog Arrays and Memories","keywords":null,"kind":"page","lang":"en","lastmod":1664394300,"objectID":"ec5dd81593f772af90f0c3de84dd99c7","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-7/","publishdate":"2022-09-28T19:45:00Z","readingtime":3,"relpermalink":"/post/2022-09-29-verilog-part-7/","section":"post","summary":"An array declaration of a net or variable can be either scalar or vector. multi-dimensional array address range identifier reg y1 [11:0]; // y is an scalar reg array of depth=12, each 1-bit wide wire [0:7] y2 [3:0] // y is an 8-bit vector net with a depth of 4 reg [7:0] y3 [0:1][0:3]; // y is a 2D array rows=2,cols=4 each 8-bit wide Assignment y1 = 0; // Illegal - All elements can\u0026#39;t be assigned in a single go y2[0] = 8\u0026#39;ha2; // Assign 0xa2 to index=0 y2[2] = 8\u0026#39;h1c; // Assign 0x1c to index=2 y3[1][2] = 8\u0026#39;hdd; // Assign 0xdd to rows=1 cols=2 y3[0][0] = 8\u0026#39;haa; // Assign 0xaa to rows=0 cols=0 Example","tags":["FPGA","Verilog","RTL"],"title":"Verilog Arrays and Memories","type":"post","url":"/post/2022-09-29-verilog-part-7/","weight":0,"wordcount":458},{"author":null,"categories":["FPGA"],"content":"Verilog scalar and vector","date":1664393400,"description":"Verilog scalar and vector","dir":"post/","excerpt_html":"Verilog scalar and vector","excerpt_text":"Verilog scalar and vector","expirydate":-62135596800,"fuzzywordcount":300,"html":"Verilog scalar and vector","keywords":null,"kind":"page","lang":"en","lastmod":1664393400,"objectID":"b4ddc265b11a47b01acd43b47a8e27ca","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-6/","publishdate":"2022-09-28T19:30:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-verilog-part-6/","section":"post","summary":"Scalar and Vector A net or reg declaration without a range specification is considered 1-bit wide and is a scalar. If a range is specified, then the net or reg becomes a multibit entity known as a vector. wire o_nor; // single bit scalar net wire [7:0] o_flop; // 8-bit vector net reg parity; // single bit scalar variable reg [31:0] addr; // 32 bit vector variable to store address Bit-selects Any bit in a vectored variable can be individually selected and assigned a new value reg [7:0] addr; // 8-bit reg variable [7, 6, 5, 4, 3, 2, 1, 0] addr [0] = 1; // assign 1 to bit 0 of addr addr [3] = 0; // assign 0 to bit 3 of addr addr [8] = 1; // illegal : bit8 does not exist in addr Part-selects A range of contiguous bits can be selected and is known as a part-select constant part-select indexed part-select reg [31:0] addr; addr [23:16] = 8\u0026#39;h23; // bits 23 to 16 will be replaced by the new value \u0026#39;h23 -\u0026gt; constant part-select [\u0026lt;start_bit\u0026gt; +: \u0026lt;width\u0026gt;] // part-select increments from start-bit [\u0026lt;start_bit\u0026gt; -: \u0026lt;width\u0026gt;] // part-select decrements from start-bit module des; reg [31:0] data; int i; initial begin data = 32\u0026#39;hFACE_CAFE; for (i = 0; i \u0026lt; 4; i++) begin $display (\u0026#34;data[8*%0d +: 8] = 0x%0h\u0026#34;, i, data[8*i +: 8]); end $display (\u0026#34;data[7:0] = 0x%0h\u0026#34;, data[7:0]); $display (\u0026#34;data[15:8] = 0x%0h\u0026#34;, data[15:8]); $display (\u0026#34;data[23:16] = 0x%0h\u0026#34;, data[23:16]); $display (\u0026#34;data[31:24] = 0x%0h\u0026#34;, data[31:24]); end endmodule Source https://www.","tags":["FPGA","Verilog","RTL"],"title":"Verilog scalar and vector","type":"post","url":"/post/2022-09-29-verilog-part-6/","weight":0,"wordcount":252},{"author":null,"categories":["FPGA"],"content":"Verilog Data Types","date":1664392800,"description":"Verilog Data Types","dir":"post/","excerpt_html":"Verilog Data Types","excerpt_text":"Verilog Data Types","expirydate":-62135596800,"fuzzywordcount":300,"html":"Verilog Data Types","keywords":null,"kind":"page","lang":"en","lastmod":1664392800,"objectID":"374565bca365f6dc270baf706d86d07b","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-5/","publishdate":"2022-09-28T19:20:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-verilog-part-5/","section":"post","summary":"What values do variables hold ? Almost all data-types can only have one of the four different values as given below except for real and event data types.\nType Meaning 0 represents a logic zero, or a false condition 1 represents a logic one, or a true condition x represents an unknown logic value (can be zero or one) z represents a high-impedance state What does the verilog value-set imply ?","tags":["FPGA","Verilog","RTL"],"title":"Verilog Data Types","type":"post","url":"/post/2022-09-29-verilog-part-5/","weight":0,"wordcount":298},{"author":null,"categories":["FPGA"],"content":"Verilog syntax","date":1664391600,"description":"Verilog syntax","dir":"post/","excerpt_html":"Verilog syntax","excerpt_text":"Verilog syntax","expirydate":-62135596800,"fuzzywordcount":500,"html":"Verilog syntax","keywords":null,"kind":"page","lang":"en","lastmod":1664391600,"objectID":"29e8bdef2061800b0330a25377b0fb26","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-4/","publishdate":"2022-09-28T19:00:00Z","readingtime":3,"relpermalink":"/post/2022-09-29-verilog-part-4/","section":"post","summary":"Operators Unary operators shall appear to the left of their operand Binary operators shall appear between their operands Conditional operators have two separate operators that separate three operands x = ~y; // ~ is a unary operator, and y is the operand x = y | z; // | is a binary operator, where y and z are its operands // If the expression (y \u0026gt; 5) is true, then variable x will get the value in w, else the value in z.","tags":["FPGA","Verilog","RTL"],"title":"Verilog syntax","type":"post","url":"/post/2022-09-29-verilog-part-4/","weight":0,"wordcount":449},{"author":null,"categories":["FPGA"],"content":"ASIC Design Flow","date":1664388000,"description":"ASIC Design Flow","dir":"post/","excerpt_html":"ASIC Design Flow","excerpt_text":"ASIC Design Flow","expirydate":-62135596800,"fuzzywordcount":100,"html":"ASIC Design Flow","keywords":null,"kind":"page","lang":"en","lastmod":1664388000,"objectID":"492bb9be739457c98c9fa098c6282f31","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-3/","publishdate":"2022-09-28T18:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-29-verilog-part-3/","section":"post","summary":"Introduction Source https://www.chipverify.com/verilog/asic-soc-chip-design-flow ","tags":["FPGA","Verilog","RTL"],"title":"ASIC Design Flow","type":"post","url":"/post/2022-09-29-verilog-part-3/","weight":0,"wordcount":3},{"author":null,"categories":["FPGA"],"content":"Introduction to Verilog","date":1664384400,"description":"Introduction to Verilog","dir":"post/","excerpt_html":"Introduction to Verilog","excerpt_text":"Introduction to Verilog","expirydate":-62135596800,"fuzzywordcount":700,"html":"Introduction to Verilog","keywords":null,"kind":"page","lang":"en","lastmod":1664384400,"objectID":"f67703c28d6f74804bf3d5699e098e9d","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-2/","publishdate":"2022-09-28T17:00:00Z","readingtime":4,"relpermalink":"/post/2022-09-29-verilog-part-2/","section":"post","summary":"Introduction A digital element such as a flip-flop can be represented with combinational gates like NAND and NOR The functionality of a flip-flop is achieved by the connection of a certain set of gates in a particular manner How the gates have to be connected is usually figured out by solving K-map from the truth table The truth table is nothing but a table that tells us what inputs combine together to give what values of output Shown in the image below is an electronic circuit that represents a D-flip flop and the corresponding truth table.","tags":["FPGA","Verilog","RTL"],"title":"Introduction to Verilog","type":"post","url":"/post/2022-09-29-verilog-part-2/","weight":0,"wordcount":649},{"author":null,"categories":["FPGA"],"content":" Shire, 200 Gbps middlebox framework for FPGAs","date":1664362800,"description":" Shire, 200 Gbps middlebox framework for FPGAs","dir":"post/","excerpt_html":" Shire, 200 Gbps middlebox framework for FPGAs","excerpt_text":" Shire, 200 Gbps middlebox framework for FPGAs","expirydate":-62135596800,"fuzzywordcount":300,"html":" Shire, 200 Gbps middlebox framework for FPGAs","keywords":null,"kind":"page","lang":"en","lastmod":1664362800,"objectID":"6d38c233e38d9325ec120d08b1bd95f7","permalink":"https://iblogging.github.io/post/2022-09-29-shire/","publishdate":"2022-09-28T11:00:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-shire/","section":"post","summary":"Introduction Shire is a new approach to designing FPGA-accelerated middleboxes that\nsimplifies development, debugging, and performance tuning by decoupling the tasks of hardware accelerator implementation and software application programming Prerequisites Vivado Intel Quartus RISC-V toolchain Partial Reconfiguration tools Xilinx: MCAP driver Intel Altera Building FPGA image For each board: define the number of RPU Current implementation 256 packets stored in buffer 16 RPU \u0026ndash;\u0026gt; Slots = 256/16 = 16 8 RPU \u0026ndash;\u0026gt; Slots = 256/8 = 32 Check Makefile on how to swapping PR regions with the desired accelerator For example fpga_src/boards/VCU1525_200g_8G make to build base image make base_0 base_0 is the base image with static regions make PIG_Hash_1 add Pigasus string matching accelerator to the RPUs make PIG_base_2 only update the load balancer to be round robin without changing the RPUs from the base design make PIG_RR_3 merge the first two, meaning taking the RPUs from PIG_Hash_1 and load balancer from PIG_base_2 Adding accelerators accelerators Examples pigasus_sme Ported Pigasus string matcher accelerator hash a hash accelerator for TCP/UDP headers ip_matcher from-scratch firewall accelerator Connect accelerator to RPU use the Verilog interface provided in the accelerator wrapper\\ fpga_src/accel/ip_matcher/rtl/accel_wrap_firewall.","tags":["FPGA","RISC-V"],"title":" Shire, 200 Gbps middlebox framework for FPGAs","type":"post","url":"/post/2022-09-29-shire/","weight":0,"wordcount":243},{"author":null,"categories":["FPGA"],"content":"Architecture of reconfigurable systems","date":1664362800,"description":"Architecture of reconfigurable systems","dir":"post/","excerpt_html":"Architecture of reconfigurable systems","excerpt_text":"Architecture of reconfigurable systems","expirydate":-62135596800,"fuzzywordcount":100,"html":"Architecture of reconfigurable systems","keywords":null,"kind":"page","lang":"en","lastmod":1664362800,"objectID":"56255925395c36a75abed37c3ec9e847","permalink":"https://iblogging.github.io/post/2022-09-29-architecture-of-reconfigurable-systems/","publishdate":"2022-09-28T11:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-29-architecture-of-reconfigurable-systems/","section":"post","summary":"Introduction This is my notes on studying Architecture of reconfigurable systems from Prof Jordane Lorandel. The course includes 03 main parts:\nFPGA introduction SoC introduction Partial Reconfiguration introduction ","tags":["FPGA"],"title":"Architecture of reconfigurable systems","type":"post","url":"/post/2022-09-29-architecture-of-reconfigurable-systems/","weight":0,"wordcount":28},{"author":null,"categories":["FPGA"],"content":"Architecture of reconfigurable systems - FPGA","date":1664362800,"description":"Architecture of reconfigurable systems - FPGA","dir":"post/","excerpt_html":"Architecture of reconfigurable systems - FPGA","excerpt_text":"Architecture of reconfigurable systems - FPGA","expirydate":-62135596800,"fuzzywordcount":200,"html":"Architecture of reconfigurable systems - FPGA","keywords":null,"kind":"page","lang":"en","lastmod":1664362800,"objectID":"9bce927cce08e90910de385240fe76dd","permalink":"https://iblogging.github.io/post/2022-09-29-fpga/","publishdate":"2022-09-28T11:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-29-fpga/","section":"post","summary":"Digital Hardware Design: Two approaches An introduction to FPGAs FPGAs Reconfigurable Mean not defined after manufacture, could be specified by the programmers themselves Configuration types Static Reconfiguration Load the whole bitstream on the FPGA Stop the execution to do the loading Static Partial Reconfiguration Only a portion of the bitstream is loaded on the FPGA Stop the execution to load the partial iage but the wait time is much shorter Dynamic Partial Reconfiguration Part of the FPGA is reconfigured while the rest is still running How is ensure reconfiguration?","tags":["FPGA"],"title":"Architecture of reconfigurable systems - FPGA","type":"post","url":"/post/2022-09-29-fpga/","weight":0,"wordcount":181},{"author":null,"categories":["FPGA"],"content":"Study Verilog - Part 1","date":1664359200,"description":"Study Verilog - Part 1","dir":"post/","excerpt_html":"Study Verilog - Part 1","excerpt_text":"Study Verilog - Part 1","expirydate":-62135596800,"fuzzywordcount":300,"html":"Study Verilog - Part 1","keywords":null,"kind":"page","lang":"en","lastmod":1664359200,"objectID":"a3d849107624ba9d420ef77b66cc1f9f","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-1/","publishdate":"2022-09-28T10:00:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-verilog-part-1/","section":"post","summary":"Introduction In the early days of integrated circuits, engineers had to sit down and physically draw transistors and their connections on paper to design them such that it can be fabricated on silicon.\nBigger and complex circuits demanded more engineers, time and other resources and soon enough there was a need to have a better way of designing integrated circuits.\nVHDL was soon developed to enhance the design process by allowing engineers to describe functionality of the desired hardware and let automation tools convert that behavior into actual hardware elements like combinational gates and sequential logic.","tags":["FPGA","Verilog","RTL"],"title":"Study Verilog - Part 1","type":"post","url":"/post/2022-09-29-verilog-part-1/","weight":0,"wordcount":299},{"author":null,"categories":null,"content":null,"date":1664323200,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1664323200,"objectID":"2f05902e7435de187bb5303fb74f55e2","permalink":"https://iblogging.github.io/post/readme/","publishdate":"2022-09-28T00:00:00Z","readingtime":1,"relpermalink":"/post/readme/","section":"post","summary":"TIPS 1. UML @startuml Alice -\u0026gt; Bob: Authentication Request Bob --\u0026gt; Alice: Authentication Response Alice -\u0026gt; Bob: Another authentication Request Alice \u0026lt;-- Bob: Another authentication Response @enduml 2. Mindmap Root Level 1 Level 2 Level 2 Level 3 Level 3 Level 4 Level 5 Level 6 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 ","tags":null,"title":"Setup","type":"post","url":"/post/readme/","weight":0,"wordcount":70},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://iblogging.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me ","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://iblogging.github.io/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/notes/","section":"","summary":"","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://iblogging.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://iblogging.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]