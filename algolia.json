[{"author":null,"categories":["FPGA"],"content":"Coroutine Cosimulation Testbench","date":1665424800,"description":"Coroutine Cosimulation Testbench","dir":"post/fpga/","excerpt_html":"Coroutine Cosimulation Testbench","excerpt_text":"Coroutine Cosimulation Testbench","expirydate":-62135596800,"fuzzywordcount":1400,"html":"Coroutine Cosimulation Testbench","keywords":null,"kind":"page","lang":"en","lastmod":1665424800,"objectID":"9b35ad89f8e764a05aac8654c025e451","permalink":"https://iblogging.github.io/post/fpga/2022-10-11-coroutine-cosimulation-testbench/","publishdate":"2022-10-10T18:00:00Z","readingtime":7,"relpermalink":"/post/fpga/2022-10-11-coroutine-cosimulation-testbench/","section":"post","summary":"Learning sources Attribute Detail Subject Coroutine Cosimulation Testbench Sources Coroutine Cosimulation Testbench Introduction Cocotb which is essentially a python framework that\nautomatically interfaces with several HDL simulators Icarus Modelsim Questasim etc allows you to drive the signals in your design directly from python itself. Entire testbench can be written in python and automation and randomization can be easily allow manipulating the signals inside your module from a \u0026rsquo;normal\u0026rsquo; language aka a Non-HDL Architecture Terminology coroutines cooperative multitasking where processes can voluntarily yield (give away) control periodically (or when idle) in order to allow other processes to run.","tags":["FPGA","RTL","Cocotb","Simulation"],"title":"Coroutine Cosimulation Testbench","type":"post","url":"/post/fpga/2022-10-11-coroutine-cosimulation-testbench/","weight":0,"wordcount":1390},{"author":null,"categories":["FPGA"],"content":"Intro to Vivado for Software Engineers","date":1665417600,"description":"Intro to Vivado for Software Engineers","dir":"post/fpga/","excerpt_html":"Intro to Vivado for Software Engineers","excerpt_text":"Intro to Vivado for Software Engineers","expirydate":-62135596800,"fuzzywordcount":400,"html":"Intro to Vivado for Software Engineers","keywords":null,"kind":"page","lang":"en","lastmod":1665417600,"objectID":"68550dea997f33c935acec1a564f4b09","permalink":"https://iblogging.github.io/post/fpga/2022-10-11-intro-to-vivado-for-software-engineers/","publishdate":"2022-10-10T16:00:00Z","readingtime":2,"relpermalink":"/post/fpga/2022-10-11-intro-to-vivado-for-software-engineers/","section":"post","summary":"Learning sources Attribute Detail Subject Intro to Vivado for Software Engineers Main Source Intro to Vivado for Software Engineers Author Neil Turley Other references:\nhttps://digilent.com/reference/programmable-logic/guides/vivado-xdc-file Source Files two types of source files:\nHDL: defines the logic constraints: pin locations provided by board provider as xdc file Tips: Search for xdc file Intel FPGA: qsf file Contrains xdc example: top.xdc set_property -dict { PACKAGE_PIN E3 IOSTANDARD LVCMOS33 } [get_ports { clk100mhz }]; create_clock -add -name sys_clk_pin -period 10.","tags":["FPGA","RTL","Vivado"],"title":"Intro to Vivado for Software Engineers","type":"post","url":"/post/fpga/2022-10-11-intro-to-vivado-for-software-engineers/","weight":0,"wordcount":324},{"author":null,"categories":["FPGA"],"content":"DDR3 SDRAM Test by Nios II","date":1665133200,"description":"DDR3 SDRAM Test by Nios II","dir":"post/fpga/","excerpt_html":"DDR3 SDRAM Test by Nios II","excerpt_text":"DDR3 SDRAM Test by Nios II","expirydate":-62135596800,"fuzzywordcount":400,"html":"DDR3 SDRAM Test by Nios II","keywords":null,"kind":"page","lang":"en","lastmod":1665133200,"objectID":"4d4c305c348485fc492b9cd0f53da12b","permalink":"https://iblogging.github.io/post/fpga/2022-10-08-ddr3-sdram-test-by-nios-ii/","publishdate":"2022-10-07T09:00:00Z","readingtime":2,"relpermalink":"/post/fpga/2022-10-08-ddr3-sdram-test-by-nios-ii/","section":"post","summary":"Learning sources Attribute Detail Subject DDR3 SDRAM Test by Nios II Main Source DDR3 SDRAM Test by Nios II Other references:\nhttps://www.intel.com/content/www/us/en/programmable/customertraining/ILT/PDF/A-MNL-ISDMI-ALL-12-0-v1.pdf Many applications use a high performance RAM, such as a DDR3 SDRAM, to provide temporary storage. This post show:\nhow the Altera’s “DDR3 SDRAM Controller with UniPHY” IP is used to access a DDR3-SDRAM, and how the Nios II processor is used to read and write the SDRAM for hardware verification.","tags":["FPGA","RTL"],"title":"DDR3 SDRAM Test by Nios II","type":"post","url":"/post/fpga/2022-10-08-ddr3-sdram-test-by-nios-ii/","weight":0,"wordcount":326},{"author":null,"categories":["FPGA"],"content":"Finite State Machine","date":1664985600,"description":"Finite State Machine","dir":"post/fpga/","excerpt_html":"Finite State Machine","excerpt_text":"Finite State Machine","expirydate":-62135596800,"fuzzywordcount":200,"html":"Finite State Machine","keywords":null,"kind":"page","lang":"en","lastmod":1664985600,"objectID":"45bad21d5f1d1498b9319de6a59a6036","permalink":"https://iblogging.github.io/post/fpga/2022-10-05-finite-state-machine/","publishdate":"2022-10-05T16:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-05-finite-state-machine/","section":"post","summary":"Learning sources Attribute Detail Subject Finite State Machine Main Source Finite State Machine Author Daniel E. Gisselquist A finite state machine consists of Inputs State Variable Finite means there are a limited number of states Outputs Two classical FSM forms Mealy Moore Two implementation approaches One process Two process Mealy Outputs depend upon the current state inputs always @ ( ∗ ) if (!i_display_enable ) o_led = 0 ; else case ( led_index ) 4\u0026#39;h1 : o_led = 8\u0026#39;h01 ; 4\u0026#39;h2 : o_led = 8\u0026#39;h02 ; 4\u0026#39;h3 : o_led = 8\u0026#39;h04 ; 4\u0026#39;h4 : o_led = 8\u0026#39;h08 ; // .","tags":["FPGA","RTL"],"title":"Finite State Machine","type":"post","url":"/post/fpga/2022-10-05-finite-state-machine/","weight":0,"wordcount":199},{"author":null,"categories":["FPGA"],"content":"Registers and blinky","date":1664960400,"description":"Registers and blinky","dir":"post/fpga/","excerpt_html":"Registers and blinky","excerpt_text":"Registers and blinky","expirydate":-62135596800,"fuzzywordcount":600,"html":"Registers and blinky","keywords":null,"kind":"page","lang":"en","lastmod":1664960400,"objectID":"4e2f670e8ebe32204fd32cd7415c00b8","permalink":"https://iblogging.github.io/post/fpga/2022-10-05-registers-and-blinky/","publishdate":"2022-10-05T09:00:00Z","readingtime":3,"relpermalink":"/post/fpga/2022-10-05-registers-and-blinky/","section":"post","summary":"Learning sources Attribute Detail Subject Registers and blinky Main Source Registers and blinky Author Daniel E. Gisselquist Registers Why use registers? Wires have no memory Only registers can hold state (data) Two basic types, both set with an always Combinatorial:\nLike wires always @ ( ∗ ) A = B ; This form can be easier to read when the logic becomes complex Synchronous:\nOnly changes values on a clock always @ ( posedge i_clk ) A \u0026lt;= B ; Combinatorial Regs always @ ( ∗ ) A = 9\u0026#39;h87 ; Registers can only be assigned in always blocks Always blocks may consist of one statement, or Many statements between a begin and end pair always @(∗) begin o_led = A ˆ i_sw ; o_led = o_led + 7 ; if( i_reset) o_led = 0 ; end Looks like software Acts like you would expect in a simulator Takes no time at all in hardware The hardware acts as if all statements were done at once Latches and Last Assignment Wins Flip Flops reg [9:0] A ; always @ ( posedge i_clk ) A \u0026lt;= A + 1\u0026#39;b1 ; Any registers set within an always @(posedge i_clk) block will transitions to their new values on the next clock edge only Only a bonafide clock edge should be used Do not transition on anything you create in logic Non-Blocking always @ ( posedge i_clk ) begin A \u0026lt;= 5 ; A \u0026lt;= A + 1 ’ b1 ; end Assume, A starts with 0 The assignment only takes place on the clock edge Last assignment wins \u0026ndash;\u0026gt; A is set to 1, then 2 on the next clock, 3 on the clock after Blocking always @ ( posedge i_clk ) begin A = 5 ; A = A + 1\u0026#39;b1 ; end the assignment only takes place on the clock edge It appears as though it took several steps A is set to 6 other examples Assume A=0 before the clock tick always @ ( posedge i_clk ) begin A \u0026lt;= 5 ; // I g n o r e d !","tags":["FPGA","RTL"],"title":"Registers and blinky","type":"post","url":"/post/fpga/2022-10-05-registers-and-blinky/","weight":0,"wordcount":580},{"author":null,"categories":["FPGA"],"content":"Wires, and combinatorial logic","date":1664913600,"description":"Wires, and combinatorial logic","dir":"post/fpga/","excerpt_html":"Wires, and combinatorial logic","excerpt_text":"Wires, and combinatorial logic","expirydate":-62135596800,"fuzzywordcount":900,"html":"Wires, and combinatorial logic","keywords":null,"kind":"page","lang":"en","lastmod":1664913600,"objectID":"6dc1261b3b7bf291bb91d67a875ebb5d","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-wires-and-combinatorial-logic/","publishdate":"2022-10-04T20:00:00Z","readingtime":4,"relpermalink":"/post/fpga/2022-10-04-wires-and-combinatorial-logic/","section":"post","summary":"Learning sources Attribute Detail Subject Wires, and combinatorial logic Main Source Wires, and combinatorial logic Author Daniel E. Gisselquist First design module thruwire ( i_sw , o_led ) ; input wire i_sw ; output wire o_led ; assign o_led = i_sw ; endmodule This module declares two ports,\ni_sw and o_led Our one piece of logic sets o_led to be the same as i_sw\nSchematic A very similar design would make a good first serial port test Your circuit board should pass this test before you try to implement your own serial port within it","tags":["FPGA","RTL"],"title":"Wires, and combinatorial logic","type":"post","url":"/post/fpga/2022-10-04-wires-and-combinatorial-logic/","weight":0,"wordcount":846},{"author":null,"categories":["FPGA"],"content":"Verilog, Formal Verification and Verilator Beginner Tutorial","date":1664910000,"description":"Verilog, Formal Verification and Verilator Beginner Tutorial","dir":"post/fpga/","excerpt_html":"Verilog, Formal Verification and Verilator Beginner Tutorial","excerpt_text":"Verilog, Formal Verification and Verilator Beginner Tutorial","expirydate":-62135596800,"fuzzywordcount":100,"html":"Verilog, Formal Verification and Verilator Beginner Tutorial","keywords":null,"kind":"page","lang":"en","lastmod":1664910000,"objectID":"fbb4934e559013979eb161c0aa07e029","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-verilog-formal-verification-and-verilator-beginner-tutorial/","publishdate":"2022-10-04T19:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-verilog-formal-verification-and-verilator-beginner-tutorial/","section":"post","summary":"Learning sources Attribute Detail Subject Verilog, Formal Verification and Verilator Beginner Tutorial Main Source Verilog, Formal Verification and Verilator Beginner Tutorial Author Daniel E. Gisselquist 1. Wires, and combinatorial logic 2. Registers and blinky 3. Finite state machines 4. Building a Wishbone Slave 5. Building hello world, using a serial port transmitter 6. Transmitting 32-bit data over the serial port 7. Buttons: 2FF synchronizers, and debouncing 8. Using FPGA block RAM 9.","tags":["FPGA","RTL"],"title":"Verilog, Formal Verification and Verilator Beginner Tutorial","type":"post","url":"/post/fpga/2022-10-04-verilog-formal-verification-and-verilator-beginner-tutorial/","weight":0,"wordcount":85},{"author":null,"categories":["FPGA"],"content":"Dan Gisselquist's FPGA debugging philosophy","date":1664906400,"description":"Dan Gisselquist's FPGA debugging philosophy","dir":"post/fpga/","excerpt_html":"Dan Gisselquist's FPGA debugging philosophy","excerpt_text":"Dan Gisselquist's FPGA debugging philosophy","expirydate":-62135596800,"fuzzywordcount":200,"html":"Dan Gisselquist's FPGA debugging philosophy","keywords":null,"kind":"page","lang":"en","lastmod":1664906400,"objectID":"56db481686351fecfbd15a8a22f9c73f","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-dan-gisselquist-debug/","publishdate":"2022-10-04T18:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-dan-gisselquist-debug/","section":"post","summary":"Learning sources Attribute Detail Subject Dan Gisselquist\u0026rsquo;s FPGA debugging philosophy Main Source Dan Gisselquist\u0026rsquo;s FPGA debugging philosophy Author Zip CPU 1. Simulation Ability to simulate all of the external components on the design 2. Hardware testing component testing Issuing individual commands to them, and verifying that individual interactions work Then issuing more complex strings of commands integrated design testing How to Debug an FPGA Start with blinky. Use blinky to debug FPGA Learn to use simulation A Vision for controlling (and debugging) an FPGA Getting that first UART working Debugging by simple bus address, Building a debug control interface How to place a logic analyzer within your design, and to get the most use out of it Getting rid of the umbilical: moving your debugging channel to TCP/IP ","tags":["FPGA","RTL"],"title":"Dan Gisselquist's FPGA debugging philosophy","type":"post","url":"/post/fpga/2022-10-04-dan-gisselquist-debug/","weight":0,"wordcount":128},{"author":null,"categories":["FPGA"],"content":"The Actual FPGA Design Process","date":1664902800,"description":"The Actual FPGA Design Process","dir":"post/fpga/","excerpt_html":"The Actual FPGA Design Process","excerpt_text":"The Actual FPGA Design Process","expirydate":-62135596800,"fuzzywordcount":200,"html":"The Actual FPGA Design Process","keywords":null,"kind":"page","lang":"en","lastmod":1664902800,"objectID":"31b799cb362d4890936cf2d2760432bd","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-the-actual-fpga-design-process/","publishdate":"2022-10-04T17:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-the-actual-fpga-design-process/","section":"post","summary":"Learning sources Attribute Detail Subject The Actual FPGA Design Process Main Source The Actual FPGA Design Process Author Zip CPU The Student’s FPGA Design Process The student builds his design in Verilog He then implements it on an FPGA, adjusting his design as necessary to meet timing and build requirements The design is then placed onto the FPGA for a test, and … The student can’t figure out why it isn’t working.","tags":["FPGA","RTL"],"title":"The Actual FPGA Design Process","type":"post","url":"/post/fpga/2022-10-04-the-actual-fpga-design-process/","weight":0,"wordcount":135},{"author":null,"categories":["FPGA"],"content":"Building a simple bus","date":1664899200,"description":"Building a simple bus","dir":"post/fpga/","excerpt_html":"Building a simple bus","excerpt_text":"Building a simple bus","expirydate":-62135596800,"fuzzywordcount":400,"html":"Building a simple bus","keywords":null,"kind":"page","lang":"en","lastmod":1664899200,"objectID":"1b723a03cd3eee09911ee859054b5e5c","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-building-simple-bus/","publishdate":"2022-10-04T16:00:00Z","readingtime":2,"relpermalink":"/post/fpga/2022-10-04-building-simple-bus/","section":"post","summary":"Learning sources Attribute Detail Subject Building a simple bus Main Source Building a simple bus Author Zip CPU Bus ### Bues - Masters + issue a command which addresses need to be + read from or + written to - Slaves + respond to the requests of the bus master(s) Simple bus Three things can only ever happen on this bus on any given clock cycle.\nThe vast majority of the time, the bus will be idle You might write to the bus or you might read from the bus Signals i_wr: True any time a write is requested.","tags":["FPGA","RTL"],"title":"Building a simple bus","type":"post","url":"/post/fpga/2022-10-04-building-simple-bus/","weight":0,"wordcount":327},{"author":null,"categories":["FPGA"],"content":"A Vision for Controlling FPGA Logic","date":1664895600,"description":"A Vision for Controlling FPGA Logic","dir":"post/fpga/","excerpt_html":"A Vision for Controlling FPGA Logic","excerpt_text":"A Vision for Controlling FPGA Logic","expirydate":-62135596800,"fuzzywordcount":200,"html":"A Vision for Controlling FPGA Logic","keywords":null,"kind":"page","lang":"en","lastmod":1664895600,"objectID":"90c0436db5a383f7e5da6da7496f9843","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-a-vision-for-controlling-fpga-logic/","publishdate":"2022-10-04T15:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-a-vision-for-controlling-fpga-logic/","section":"post","summary":"Learning sources Attribute Detail Subject A Vision for Controlling FPGA Logic Main Source A Vision for Controlling FPGA Logic Author Zip CPU Memory Mapped I/O # Memory Mapped I/O - Peripherals can be connected to a bus + they can be accessed like memory + may have many addresses + may take different amounts of time to access. - Bus controller + type + CPU + [DMA peripheral](https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v) + write to the peripheral + read from it - Register + a single address + within a peripheral.","tags":["FPGA","RTL"],"title":"A Vision for Controlling FPGA Logic","type":"post","url":"/post/fpga/2022-10-04-a-vision-for-controlling-fpga-logic/","weight":0,"wordcount":116},{"author":null,"categories":["FPGA"],"content":"FPGA Hell","date":1664895600,"description":"FPGA Hell","dir":"post/fpga/","excerpt_html":"FPGA Hell","excerpt_text":"FPGA Hell","expirydate":-62135596800,"fuzzywordcount":200,"html":"FPGA Hell","keywords":null,"kind":"page","lang":"en","lastmod":1664895600,"objectID":"3b1accaa995ea7d59af87a35a2973188","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-fpga-hell/","publishdate":"2022-10-04T15:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-fpga-hell/","section":"post","summary":"Learning sources Attribute Detail Subject FPGA Hell Main Source FPGA Hell Author Zip CPU FPGA Hell: load the design onto device, it doesn’t work, and you don’t know why.\n## The solution - Level 1: Simulation + Simulate everything + Run on similation first. + use the simulation to debug + If the issue can not be resolve, use `scope` - Level 2: Scope + Measure what’s really going on + Watch your code interact with the real hardware, and + use what you learn to `find where reality and your simulation disconnect`.","tags":["FPGA","RTL"],"title":"FPGA Hell","type":"post","url":"/post/fpga/2022-10-04-fpga-hell/","weight":0,"wordcount":128},{"author":null,"categories":["FPGA"],"content":"AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic","date":1664881200,"description":"AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic","dir":"post/fpga/","excerpt_html":"AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic","excerpt_text":"AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic","expirydate":-62135596800,"fuzzywordcount":200,"html":"AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic","keywords":null,"kind":"page","lang":"en","lastmod":1664881200,"objectID":"f0a45f1e2d5a0adce25af89b6765e311","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-axi-interconnects-tutorial-02/","publishdate":"2022-10-04T11:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-axi-interconnects-tutorial-02/","section":"post","summary":"Learning sources Attribute Detail Subject AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic Main Source AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic Author Stephen St. Michael The ready/valid hardware data transfer protocol is simple and ingenious, providing flow control with only two control signals. The rules are straightforward: data transfer only happens when both ready and valid are \u0026lsquo;1\u0026rsquo; during the same clock cycle.","tags":["FPGA","RTL"],"title":"AXI Interconnects Tutorial: Multiple AXI Masters and Slaves in Digital Logic","type":"post","url":"/post/fpga/2022-10-04-axi-interconnects-tutorial-02/","weight":0,"wordcount":114},{"author":null,"categories":["FPGA"],"content":"Introduction to the Advanced Extensible Interface (AXI)","date":1664877600,"description":"Introduction to the Advanced Extensible Interface (AXI)","dir":"post/fpga/","excerpt_html":"Introduction to the Advanced Extensible Interface (AXI)","excerpt_text":"Introduction to the Advanced Extensible Interface (AXI)","expirydate":-62135596800,"fuzzywordcount":500,"html":"Introduction to the Advanced Extensible Interface (AXI)","keywords":null,"kind":"page","lang":"en","lastmod":1664877600,"objectID":"58b7d9396b1b7da353956031dad0ff6c","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-axi-interconnects-tutorial-01/","publishdate":"2022-10-04T10:00:00Z","readingtime":3,"relpermalink":"/post/fpga/2022-10-04-axi-interconnects-tutorial-01/","section":"post","summary":"Learning sources Attribute Detail Subject Introduction to the Advanced Extensible Interface (AXI) Main Source Introduction to the Advanced Extensible Interface (AXI) Author Stephen St. Michael The AXI Architecture AXI Channels - AXI Channels - Read address channel - Read data channel - Write address channel - Write data channel - Write response channel The address channels are used to send\naddress and control information while performing a basic handshake between master and slave.","tags":["FPGA","RTL"],"title":"Introduction to the Advanced Extensible Interface (AXI)","type":"post","url":"/post/fpga/2022-10-04-axi-interconnects-tutorial-01/","weight":0,"wordcount":467},{"author":null,"categories":["FPGA"],"content":"HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS","date":1664870400,"description":"HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS","dir":"post/fpga/","excerpt_html":"HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS","excerpt_text":"HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS","expirydate":-62135596800,"fuzzywordcount":200,"html":"HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS","keywords":null,"kind":"page","lang":"en","lastmod":1664870400,"objectID":"77e4484630ccd44ed912f4d5b3dd4d1f","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-how-axi-style-ready-valid-handshake-work/","publishdate":"2022-10-04T08:00:00Z","readingtime":1,"relpermalink":"/post/fpga/2022-10-04-how-axi-style-ready-valid-handshake-work/","section":"post","summary":"Learning sources Attribute Detail Subject HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS Main Source HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS Author JONAS JULIAN JENSEN The ready/valid hardware data transfer protocol is simple and ingenious, providing flow control with only two control signals. The rules are straightforward: data transfer only happens when both ready and valid are \u0026lsquo;1\u0026rsquo; during the same clock cycle.\nUSING THE READY/VALID HANDSHAKE RECEIVER AND SENDER INTERFAC CONNECTING TWO MODULES Examples SENDING AND RECEIVING AT FULL SPEED SLOW WRITER AND FAST READER In this example, the ready signal is always \u0026lsquo;1\u0026rsquo; while the sender asserts valid occasionally.","tags":["FPGA","RTL"],"title":"HOW THE AXI-STYLE READY/VALID HANDSHAKE WORKS","type":"post","url":"/post/fpga/2022-10-04-how-axi-style-ready-valid-handshake-work/","weight":0,"wordcount":104},{"author":null,"categories":["FPGA"],"content":"Longest Prefix Matching in Networking Chips","date":1664805600,"description":"Longest Prefix Matching in Networking Chips","dir":"post/fpga/","excerpt_html":"Longest Prefix Matching in Networking Chips","excerpt_text":"Longest Prefix Matching in Networking Chips","expirydate":-62135596800,"fuzzywordcount":700,"html":"Longest Prefix Matching in Networking Chips","keywords":null,"kind":"page","lang":"en","lastmod":1664805600,"objectID":"c57acea887129157014da395e1f124c3","permalink":"https://iblogging.github.io/post/fpga/2022-10-04-longest-prefix-matching-in-networking-chips/","publishdate":"2022-10-03T14:00:00Z","readingtime":4,"relpermalink":"/post/fpga/2022-10-04-longest-prefix-matching-in-networking-chips/","section":"post","summary":"Attribute Detail Subject Longest Prefix Matching in Networking Chips Source Longest Prefix Matching in Networking Chips Source Longest Prefix Match with Trie Tree Author Sharada Yeluri Basics Two planes Control plane\ndetermine how the packets should be processed and forwarded. executes these tasks in the background populates the tables in the data plane maintains Routing Information Database (RIB) routes direct routes static routes dynamic routes Control plane software optimizes and compresses the information in the RIB before installing the routes into the tables inside networking chips ( called Forwarding Information Databases (FIB) ) Forwarding Information Databases (FIB) stored in on-chip or off-chip memories (SRAM, HBM/DRAM, or TCAM) contains just enough information to forward the packets to their next destination or nexthop updated by the control plane software Contents contains the IP address subnet mask (or IP prefix), and the nexthop could directly indicate the physical interface Or it can point to an entry in yet another table Simplest model Data plane or forwarding plane","tags":["FPGA"],"title":"Longest Prefix Matching in Networking Chips","type":"post","url":"/post/fpga/2022-10-04-longest-prefix-matching-in-networking-chips/","weight":0,"wordcount":689},{"author":null,"categories":["Linux"],"content":"How To Write Linux PCI Drivers","date":1664708400,"description":"How To Write Linux PCI Drivers","dir":"post/linux/","excerpt_html":"How To Write Linux PCI Drivers","excerpt_text":"How To Write Linux PCI Drivers","expirydate":-62135596800,"fuzzywordcount":2200,"html":"How To Write Linux PCI Drivers","keywords":null,"kind":"page","lang":"en","lastmod":1664708400,"objectID":"ee990f94d189df805c0bf26dd75c3c2a","permalink":"https://iblogging.github.io/post/linux/2022-10-02-how-to-write-pci-driver/","publishdate":"2022-10-02T11:00:00Z","readingtime":11,"relpermalink":"/post/linux/2022-10-02-how-to-write-pci-driver/","section":"post","summary":"The PCI bus is the most popular way to connect high-speed peripheral inside a modern computer system:\na video and network adapters, sound cards, storage devices, etc. Some custom and special devices, some acquisition boards with ADC, or any other interface might be custom and special devices. Even your modern laptop uses this bus to connect internal devices to the CPU, even without actual physical connectors. This bus is widely available on a different platforms, like x86, arm, mips, riscv.","tags":["FPGA","Linux","Embedded"],"title":"How To Write Linux PCI Drivers","type":"post","url":"/post/linux/2022-10-02-how-to-write-pci-driver/","weight":0,"wordcount":2140},{"author":null,"categories":["mental models"],"content":"Fact over fake","date":1664645400,"description":"Fact over fake","dir":"post/books/","excerpt_html":"Fact over fake","excerpt_text":"Fact over fake","expirydate":-62135596800,"fuzzywordcount":900,"html":"Fact over fake","keywords":null,"kind":"page","lang":"en","lastmod":1664645400,"objectID":"d214bfad796ca6bebc66c3b01594d703","permalink":"https://iblogging.github.io/post/books/2022-10-01-fact-over-fake/","publishdate":"2022-10-01T17:30:00Z","readingtime":5,"relpermalink":"/post/books/2022-10-01-fact-over-fake/","section":"post","summary":"Fact over fake 1. KEY CRITICAL THINKING QUESTIONS TO ASK WHEN SEEKING THE NEWS Is this news source reputable? In other words: Does it appear to at least attempt to present the news in an unbiased manner? Does it have a track record of reporting actual stories, rather than urban myths, conspiracy theories, and other unfounded claims? Does this news source openly publish retractions and corrections after making errors in its reporting?","tags":["mental models","book","critical thinking"],"title":"Fact over fake","type":"post","url":"/post/books/2022-10-01-fact-over-fake/","weight":0,"wordcount":884},{"author":null,"categories":["mental models"],"content":"The Spirit of Critical Thinking","date":1664641800,"description":"The Spirit of Critical Thinking","dir":"post/books/","excerpt_html":"The Spirit of Critical Thinking","excerpt_text":"The Spirit of Critical Thinking","expirydate":-62135596800,"fuzzywordcount":600,"html":"The Spirit of Critical Thinking","keywords":null,"kind":"page","lang":"en","lastmod":1664641800,"objectID":"555e7308b0c85e74b639b2fa82dc6e60","permalink":"https://iblogging.github.io/post/books/2022-10-01-the-spirit-of-critial-thinking/","publishdate":"2022-10-01T16:30:00Z","readingtime":3,"relpermalink":"/post/books/2022-10-01-the-spirit-of-critial-thinking/","section":"post","summary":"The Spirit of Critical Thinking Template for Analyzing the Logic of an Article Use this template to deconstruct any article, essay, or chapter of a textbook.\nThe Logic of “(name of the article)” 1. The main purpose of this article is ________________________________. State as accurately as possible the author’s purpose for writing the article. 2. The key question that the author is addressing is ____________________. Figure out the key question in the mind of the author when s/he wrote the article.","tags":["mental models","book","critical thinking"],"title":"The Spirit of Critical Thinking","type":"post","url":"/post/books/2022-10-01-the-spirit-of-critial-thinking/","weight":0,"wordcount":529},{"author":null,"categories":["mental models"],"content":"The Elements of Thought","date":1664640000,"description":"The Elements of Thought","dir":"post/books/","excerpt_html":"The Elements of Thought","excerpt_text":"The Elements of Thought","expirydate":-62135596800,"fuzzywordcount":800,"html":"The Elements of Thought","keywords":null,"kind":"page","lang":"en","lastmod":1664640000,"objectID":"7693af1a888589fce0338b0bcf1f2739","permalink":"https://iblogging.github.io/post/books/2022-10-01-critical-thinking/","publishdate":"2022-10-01T16:00:00Z","readingtime":4,"relpermalink":"/post/books/2022-10-01-critical-thinking/","section":"post","summary":"Element of thoughts Whenever we think, we think for\na purpose within a point of view based on assumptions that lead to implications and consequences. We use\nconcepts, ideas, and theories to interpret data, facts, and experiences in order to\nanswer questions, solve problems, and resolve issues. Questions Using the Elements of Thoughts Purpose What am I trying to accomplish? What is my central aim? My purpose? Questions What question am I raising?","tags":["mental models","book","critical thinking"],"title":"The Elements of Thought","type":"post","url":"/post/books/2022-10-01-critical-thinking/","weight":0,"wordcount":701},{"author":null,"categories":["mental models"],"content":"Book list","date":1664557200,"description":"Book list","dir":"post/books/","excerpt_html":"Book list","excerpt_text":"Book list","expirydate":-62135596800,"fuzzywordcount":100,"html":"Book list","keywords":null,"kind":"page","lang":"en","lastmod":1664557200,"objectID":"09b9e70bbe09ccf0e18f45fe6cfbdf6a","permalink":"https://iblogging.github.io/post/books/2022-10-01-boolist/","publishdate":"2022-09-30T17:00:00Z","readingtime":1,"relpermalink":"/post/books/2022-10-01-boolist/","section":"post","summary":" Book Summary 0 represents a logic zero, or a false condition 1 represents a logic one, or a true condition x represents an unknown logic value (can be zero or one) z represents a high-impedance state ","tags":["mental models","book"],"title":"Book list","type":"post","url":"/post/books/2022-10-01-boolist/","weight":0,"wordcount":36},{"author":null,"categories":["mental models"],"content":"How to Read a Book","date":1664553600,"description":"How to Read a Book","dir":"post/books/","excerpt_html":"How to Read a Book","excerpt_text":"How to Read a Book","expirydate":-62135596800,"fuzzywordcount":900,"html":"How to Read a Book","keywords":null,"kind":"page","lang":"en","lastmod":1664553600,"objectID":"c26c62252e1d1324942f9d0265ee7cc9","permalink":"https://iblogging.github.io/post/books/2022-10-01-how-to-read-a-book/","publishdate":"2022-09-30T16:00:00Z","readingtime":5,"relpermalink":"/post/books/2022-10-01-how-to-read-a-book/","section":"post","summary":"Introduction Two kind of books:\nFiction/novels books Non-fiction books textbooks manuals journal articles histories academic studies etc The purpose of reading things like Non-fiction books is to gain, and retain, information finding out what happens — as quickly and easily as possible — is your main goal\nNEVER read a non-fiction book or article from beginning to end\nStrategy should ALWAYS jump ahead skip around use every available strategy to discover, then to understand and finally to remember what the writer has to say you should be able to read a 300-page book in 06 to 08 hours","tags":["mental models","book"],"title":"How to Read a Book","type":"post","url":"/post/books/2022-10-01-how-to-read-a-book/","weight":0,"wordcount":870},{"author":null,"categories":["mental models"],"content":" Feedback: Key to Continuous Learning","date":1664546400,"description":" Feedback: Key to Continuous Learning","dir":"post/","excerpt_html":" Feedback: Key to Continuous Learning","excerpt_text":" Feedback: Key to Continuous Learning","expirydate":-62135596800,"fuzzywordcount":300,"html":" Feedback: Key to Continuous Learning","keywords":null,"kind":"page","lang":"en","lastmod":1664546400,"objectID":"ee648acb769a8f2dbf9b9bfd1b243a39","permalink":"https://iblogging.github.io/post/2022-09-30-feedback/","publishdate":"2022-09-30T14:00:00Z","readingtime":2,"relpermalink":"/post/2022-09-30-feedback/","section":"post","summary":"Drucker on Asia - Peter Drucker Feedback: Key to Continuous Learning To know one’s strengths, to know how to improve them, and to know what one cannot do—are the keys to continuous learning. Whenever a Jesuit priest or a Calvinist pastor does anything of significance (for instance, making a key decision)\nhe is expected to write down what results he anticipates. Nine months later, he then feeds back from the actual results to these anticipations.","tags":["mental models","questioning","Critical thinking"],"title":"Feedback: Key to Continuous Learning","type":"post","url":"/post/2022-09-30-feedback/","weight":0,"wordcount":218},{"author":null,"categories":["mental models"],"content":" Reinvent Yourself","date":1664542800,"description":" Reinvent Yourself","dir":"post/","excerpt_html":" Reinvent Yourself","excerpt_text":" Reinvent Yourself","expirydate":-62135596800,"fuzzywordcount":300,"html":" Reinvent Yourself","keywords":null,"kind":"page","lang":"en","lastmod":1664542800,"objectID":"0f0da521154c3358c0458122b49e14d4","permalink":"https://iblogging.github.io/post/2022-09-30-reinvent-yourself/","publishdate":"2022-09-30T13:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-30-reinvent-yourself/","section":"post","summary":"Drucker on Asia - Peter Drucker Knowledge people must take responsibility for their own development and placement In today’s society and organizations, people work increasingly with knowledge, rather than with skill.\nKnowledge and skill differ in a fundamental characteristic: skills change very, very slowly. Knowledge, however,changes itself. It makes itself obsolete, and very rapidly. A knowledge worker becomes obsolescent [nerver use] if he or she does not go back to school every three or four years.","tags":["mental models","questioning","Critical thinking"],"title":"Reinvent Yourself","type":"post","url":"/post/2022-09-30-reinvent-yourself/","weight":0,"wordcount":211},{"author":null,"categories":["mental models"],"content":" The Benefit and Manner of Asking the Right","date":1664539200,"description":" The Benefit and Manner of Asking the Right","dir":"post/","excerpt_html":" The Benefit and Manner of Asking the Right","excerpt_text":" The Benefit and Manner of Asking the Right","expirydate":-62135596800,"fuzzywordcount":200,"html":" The Benefit and Manner of Asking the Right","keywords":null,"kind":"page","lang":"en","lastmod":1664539200,"objectID":"bdcf705ff66c7789a49b0ecf3502a180","permalink":"https://iblogging.github.io/post/2022-09-30-asking-the-right-questions-c1/","publishdate":"2022-09-30T12:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-30-asking-the-right-questions-c1/","section":"post","summary":"Chapter 1 Objective Contrast a world where no critical thinking is needed with the world we live in. Understand the role of experts in forming our beliefs and conclusions. Clarify the meaning of critical thinking. Distinguish between weak-sense and strong-sense critical thinking. Integrate the role of values with critical thinking. Identify techniques for using critical thinking as a conversation stimulus. This is a colour shortcode \u0026lt;span style=\u0026quot; background-color: red; -webkit-background-clip: text; -moz-background-clip: text; background-clip: text; color: transparent; \u0026quot; .","tags":["mental models","questioning","Critical thinking"],"title":"The Benefit and Manner of Asking the Right","type":"post","url":"/post/2022-09-30-asking-the-right-questions-c1/","weight":0,"wordcount":115},{"author":null,"categories":["FPGA"],"content":"Verilog Building Blocks","date":1664492400,"description":"Verilog Building Blocks","dir":"post/","excerpt_html":"Verilog Building Blocks","excerpt_text":"Verilog Building Blocks","expirydate":-62135596800,"fuzzywordcount":3100,"html":"Verilog Building Blocks","keywords":null,"kind":"page","lang":"en","lastmod":1664492400,"objectID":"5875ea41954496d12a61a45a2a36d100","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-8/","publishdate":"2022-09-29T23:00:00Z","readingtime":15,"relpermalink":"/post/2022-09-29-verilog-part-8/","section":"post","summary":"1. Module A module is a block of Verilog code that implements a certain functionality. Modules can be embedded within other modules and a higher level module can communicate with its lower level modules using their input and output ports. A module should be enclosed within module and endmodule keywords module \u0026lt;name\u0026gt; ([port_list]); // Contents of the module endmodule // A module can have an empty portlist module name; // Contents of the module endmodule // Module called \u0026#34;dff\u0026#34; has 3 inputs and 1 output port module dff ( input d, input clk, input rstn, output reg\tq); // Contents of the module always @ (posedge clk) begin if (!","tags":["FPGA","Verilog","RTL"],"title":"Verilog Building Blocks","type":"post","url":"/post/2022-09-29-verilog-part-8/","weight":0,"wordcount":3028},{"author":null,"categories":["FPGA"],"content":" Understand shire","date":1664449200,"description":" Understand shire","dir":"post/","excerpt_html":" Understand shire","excerpt_text":" Understand shire","expirydate":-62135596800,"fuzzywordcount":300,"html":" Understand shire","keywords":null,"kind":"page","lang":"en","lastmod":1664449200,"objectID":"4c03d9a91bb85a0dc35d3abd18f02318","permalink":"https://iblogging.github.io/post/2022-09-29-understand-shire-source-code/","publishdate":"2022-09-29T11:00:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-understand-shire-source-code/","section":"post","summary":"Introduction Shire is a new approach to designing FPGA-accelerated middleboxes that\nsimplifies development, debugging, and performance tuning by decoupling the tasks of hardware accelerator implementation and software application programming Architecture Shire includes 04 main components\nIO ports for packet input/output. 100Gbps Ethernet ports to transmit packets to the network 100Gbps PCIe port to transmit packets and control message with host Packet scheduler Distribute packets to Packet processing units IO ports Packet switch As a queue to deliver packets between Packet Processor and Packet Scheduler Packet processor RISC-V core Accelerator Hybrid memory subsystem IO Ports 100Gbps Ethernet 100Gps PCIe Packet scheduler (PS) Externally, the PS module need to comminicate with 03 other modules","tags":["FPGA","RISC-V"],"title":" Understand shire","type":"post","url":"/post/2022-09-29-understand-shire-source-code/","weight":0,"wordcount":241},{"author":null,"categories":["mental models"],"content":" Asking why multiple times helps us understand the core reason","date":1664398800,"description":" Asking why multiple times helps us understand the core reason","dir":"post/mental-models/","excerpt_html":" Asking why multiple times helps us understand the core reason","excerpt_text":" Asking why multiple times helps us understand the core reason","expirydate":-62135596800,"fuzzywordcount":300,"html":" Asking why multiple times helps us understand the core reason","keywords":null,"kind":"page","lang":"en","lastmod":1664398800,"objectID":"b053a85ed3d53f27e524c0ad4b0cd065","permalink":"https://iblogging.github.io/post/mental-models/2022-09-29-5-whys/","publishdate":"2022-09-28T21:00:00Z","readingtime":2,"relpermalink":"/post/mental-models/2022-09-29-5-whys/","section":"post","summary":"Introduction By asking why multiple times we can have a deeper understanding on the causes of the higher level problem. The goal is to land on a what or a how.\nIt’s an interrogative technique that’s iterative, and is used to discover the root causes of a problem. The answer to each “why” question leads to an answer that forms the basis of the next question.\nThe “five” in the name comes from the observation that it often takes about 5 iterations to get to the root cause of a problem.","tags":["mental models","questioning","critical thinking"],"title":" 5 Whys mental model","type":"post","url":"/post/mental-models/2022-09-29-5-whys/","weight":0,"wordcount":285},{"author":null,"categories":["FPGA"],"content":"Verilog Arrays and Memories","date":1664394300,"description":"Verilog Arrays and Memories","dir":"post/","excerpt_html":"Verilog Arrays and Memories","excerpt_text":"Verilog Arrays and Memories","expirydate":-62135596800,"fuzzywordcount":500,"html":"Verilog Arrays and Memories","keywords":null,"kind":"page","lang":"en","lastmod":1664394300,"objectID":"ec5dd81593f772af90f0c3de84dd99c7","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-7/","publishdate":"2022-09-28T19:45:00Z","readingtime":3,"relpermalink":"/post/2022-09-29-verilog-part-7/","section":"post","summary":"An array declaration of a net or variable can be either scalar or vector. multi-dimensional array address range identifier reg y1 [11:0]; // y is an scalar reg array of depth=12, each 1-bit wide wire [0:7] y2 [3:0] // y is an 8-bit vector net with a depth of 4 reg [7:0] y3 [0:1][0:3]; // y is a 2D array rows=2,cols=4 each 8-bit wide Assignment y1 = 0; // Illegal - All elements can\u0026#39;t be assigned in a single go y2[0] = 8\u0026#39;ha2; // Assign 0xa2 to index=0 y2[2] = 8\u0026#39;h1c; // Assign 0x1c to index=2 y3[1][2] = 8\u0026#39;hdd; // Assign 0xdd to rows=1 cols=2 y3[0][0] = 8\u0026#39;haa; // Assign 0xaa to rows=0 cols=0 Example","tags":["FPGA","Verilog","RTL"],"title":"Verilog Arrays and Memories","type":"post","url":"/post/2022-09-29-verilog-part-7/","weight":0,"wordcount":458},{"author":null,"categories":["FPGA"],"content":"Verilog scalar and vector","date":1664393400,"description":"Verilog scalar and vector","dir":"post/","excerpt_html":"Verilog scalar and vector","excerpt_text":"Verilog scalar and vector","expirydate":-62135596800,"fuzzywordcount":300,"html":"Verilog scalar and vector","keywords":null,"kind":"page","lang":"en","lastmod":1664393400,"objectID":"b4ddc265b11a47b01acd43b47a8e27ca","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-6/","publishdate":"2022-09-28T19:30:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-verilog-part-6/","section":"post","summary":"Scalar and Vector A net or reg declaration without a range specification is considered 1-bit wide and is a scalar. If a range is specified, then the net or reg becomes a multibit entity known as a vector. wire o_nor; // single bit scalar net wire [7:0] o_flop; // 8-bit vector net reg parity; // single bit scalar variable reg [31:0] addr; // 32 bit vector variable to store address Bit-selects Any bit in a vectored variable can be individually selected and assigned a new value reg [7:0] addr; // 8-bit reg variable [7, 6, 5, 4, 3, 2, 1, 0] addr [0] = 1; // assign 1 to bit 0 of addr addr [3] = 0; // assign 0 to bit 3 of addr addr [8] = 1; // illegal : bit8 does not exist in addr Part-selects A range of contiguous bits can be selected and is known as a part-select constant part-select indexed part-select reg [31:0] addr; addr [23:16] = 8\u0026#39;h23; // bits 23 to 16 will be replaced by the new value \u0026#39;h23 -\u0026gt; constant part-select [\u0026lt;start_bit\u0026gt; +: \u0026lt;width\u0026gt;] // part-select increments from start-bit [\u0026lt;start_bit\u0026gt; -: \u0026lt;width\u0026gt;] // part-select decrements from start-bit module des; reg [31:0] data; int i; initial begin data = 32\u0026#39;hFACE_CAFE; for (i = 0; i \u0026lt; 4; i++) begin $display (\u0026#34;data[8*%0d +: 8] = 0x%0h\u0026#34;, i, data[8*i +: 8]); end $display (\u0026#34;data[7:0] = 0x%0h\u0026#34;, data[7:0]); $display (\u0026#34;data[15:8] = 0x%0h\u0026#34;, data[15:8]); $display (\u0026#34;data[23:16] = 0x%0h\u0026#34;, data[23:16]); $display (\u0026#34;data[31:24] = 0x%0h\u0026#34;, data[31:24]); end endmodule Source https://www.","tags":["FPGA","Verilog","RTL"],"title":"Verilog scalar and vector","type":"post","url":"/post/2022-09-29-verilog-part-6/","weight":0,"wordcount":252},{"author":null,"categories":["FPGA"],"content":"Verilog Data Types","date":1664392800,"description":"Verilog Data Types","dir":"post/","excerpt_html":"Verilog Data Types","excerpt_text":"Verilog Data Types","expirydate":-62135596800,"fuzzywordcount":300,"html":"Verilog Data Types","keywords":null,"kind":"page","lang":"en","lastmod":1664392800,"objectID":"374565bca365f6dc270baf706d86d07b","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-5/","publishdate":"2022-09-28T19:20:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-verilog-part-5/","section":"post","summary":"What values do variables hold ? Almost all data-types can only have one of the four different values as given below except for real and event data types.\nType Meaning 0 represents a logic zero, or a false condition 1 represents a logic one, or a true condition x represents an unknown logic value (can be zero or one) z represents a high-impedance state What does the verilog value-set imply ?","tags":["FPGA","Verilog","RTL"],"title":"Verilog Data Types","type":"post","url":"/post/2022-09-29-verilog-part-5/","weight":0,"wordcount":298},{"author":null,"categories":["FPGA"],"content":"Verilog syntax","date":1664391600,"description":"Verilog syntax","dir":"post/","excerpt_html":"Verilog syntax","excerpt_text":"Verilog syntax","expirydate":-62135596800,"fuzzywordcount":500,"html":"Verilog syntax","keywords":null,"kind":"page","lang":"en","lastmod":1664391600,"objectID":"29e8bdef2061800b0330a25377b0fb26","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-4/","publishdate":"2022-09-28T19:00:00Z","readingtime":3,"relpermalink":"/post/2022-09-29-verilog-part-4/","section":"post","summary":"Operators Unary operators shall appear to the left of their operand Binary operators shall appear between their operands Conditional operators have two separate operators that separate three operands x = ~y; // ~ is a unary operator, and y is the operand x = y | z; // | is a binary operator, where y and z are its operands // If the expression (y \u0026gt; 5) is true, then variable x will get the value in w, else the value in z.","tags":["FPGA","Verilog","RTL"],"title":"Verilog syntax","type":"post","url":"/post/2022-09-29-verilog-part-4/","weight":0,"wordcount":449},{"author":null,"categories":["FPGA"],"content":"ASIC Design Flow","date":1664388000,"description":"ASIC Design Flow","dir":"post/","excerpt_html":"ASIC Design Flow","excerpt_text":"ASIC Design Flow","expirydate":-62135596800,"fuzzywordcount":100,"html":"ASIC Design Flow","keywords":null,"kind":"page","lang":"en","lastmod":1664388000,"objectID":"492bb9be739457c98c9fa098c6282f31","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-3/","publishdate":"2022-09-28T18:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-29-verilog-part-3/","section":"post","summary":"Introduction Source https://www.chipverify.com/verilog/asic-soc-chip-design-flow ","tags":["FPGA","Verilog","RTL"],"title":"ASIC Design Flow","type":"post","url":"/post/2022-09-29-verilog-part-3/","weight":0,"wordcount":3},{"author":null,"categories":["FPGA"],"content":"Introduction to Verilog","date":1664384400,"description":"Introduction to Verilog","dir":"post/","excerpt_html":"Introduction to Verilog","excerpt_text":"Introduction to Verilog","expirydate":-62135596800,"fuzzywordcount":700,"html":"Introduction to Verilog","keywords":null,"kind":"page","lang":"en","lastmod":1664384400,"objectID":"f67703c28d6f74804bf3d5699e098e9d","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-2/","publishdate":"2022-09-28T17:00:00Z","readingtime":4,"relpermalink":"/post/2022-09-29-verilog-part-2/","section":"post","summary":"Introduction A digital element such as a flip-flop can be represented with combinational gates like NAND and NOR The functionality of a flip-flop is achieved by the connection of a certain set of gates in a particular manner How the gates have to be connected is usually figured out by solving K-map from the truth table The truth table is nothing but a table that tells us what inputs combine together to give what values of output Shown in the image below is an electronic circuit that represents a D-flip flop and the corresponding truth table.","tags":["FPGA","Verilog","RTL"],"title":"Introduction to Verilog","type":"post","url":"/post/2022-09-29-verilog-part-2/","weight":0,"wordcount":649},{"author":null,"categories":["FPGA"],"content":" Shire, 200 Gbps middlebox framework for FPGAs","date":1664362800,"description":" Shire, 200 Gbps middlebox framework for FPGAs","dir":"post/","excerpt_html":" Shire, 200 Gbps middlebox framework for FPGAs","excerpt_text":" Shire, 200 Gbps middlebox framework for FPGAs","expirydate":-62135596800,"fuzzywordcount":300,"html":" Shire, 200 Gbps middlebox framework for FPGAs","keywords":null,"kind":"page","lang":"en","lastmod":1664362800,"objectID":"6d38c233e38d9325ec120d08b1bd95f7","permalink":"https://iblogging.github.io/post/2022-09-29-shire/","publishdate":"2022-09-28T11:00:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-shire/","section":"post","summary":"Introduction Shire is a new approach to designing FPGA-accelerated middleboxes that\nsimplifies development, debugging, and performance tuning by decoupling the tasks of hardware accelerator implementation and software application programming Prerequisites Vivado Intel Quartus RISC-V toolchain Partial Reconfiguration tools Xilinx: MCAP driver Intel Altera Building FPGA image For each board: define the number of RPU Current implementation 256 packets stored in buffer 16 RPU \u0026ndash;\u0026gt; Slots = 256/16 = 16 8 RPU \u0026ndash;\u0026gt; Slots = 256/8 = 32 Check Makefile on how to swapping PR regions with the desired accelerator For example fpga_src/boards/VCU1525_200g_8G make to build base image make base_0 base_0 is the base image with static regions make PIG_Hash_1 add Pigasus string matching accelerator to the RPUs make PIG_base_2 only update the load balancer to be round robin without changing the RPUs from the base design make PIG_RR_3 merge the first two, meaning taking the RPUs from PIG_Hash_1 and load balancer from PIG_base_2 Adding accelerators accelerators Examples pigasus_sme Ported Pigasus string matcher accelerator hash a hash accelerator for TCP/UDP headers ip_matcher from-scratch firewall accelerator Connect accelerator to RPU use the Verilog interface provided in the accelerator wrapper\\ fpga_src/accel/ip_matcher/rtl/accel_wrap_firewall.","tags":["FPGA","RISC-V"],"title":" Shire, 200 Gbps middlebox framework for FPGAs","type":"post","url":"/post/2022-09-29-shire/","weight":0,"wordcount":243},{"author":null,"categories":["FPGA"],"content":"Architecture of reconfigurable systems","date":1664362800,"description":"Architecture of reconfigurable systems","dir":"post/","excerpt_html":"Architecture of reconfigurable systems","excerpt_text":"Architecture of reconfigurable systems","expirydate":-62135596800,"fuzzywordcount":100,"html":"Architecture of reconfigurable systems","keywords":null,"kind":"page","lang":"en","lastmod":1664362800,"objectID":"56255925395c36a75abed37c3ec9e847","permalink":"https://iblogging.github.io/post/2022-09-29-architecture-of-reconfigurable-systems/","publishdate":"2022-09-28T11:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-29-architecture-of-reconfigurable-systems/","section":"post","summary":"Introduction This is my notes on studying Architecture of reconfigurable systems from Prof Jordane Lorandel. The course includes 03 main parts:\nFPGA introduction SoC introduction Partial Reconfiguration introduction ","tags":["FPGA"],"title":"Architecture of reconfigurable systems","type":"post","url":"/post/2022-09-29-architecture-of-reconfigurable-systems/","weight":0,"wordcount":28},{"author":null,"categories":["FPGA"],"content":"Architecture of reconfigurable systems - FPGA","date":1664362800,"description":"Architecture of reconfigurable systems - FPGA","dir":"post/","excerpt_html":"Architecture of reconfigurable systems - FPGA","excerpt_text":"Architecture of reconfigurable systems - FPGA","expirydate":-62135596800,"fuzzywordcount":200,"html":"Architecture of reconfigurable systems - FPGA","keywords":null,"kind":"page","lang":"en","lastmod":1664362800,"objectID":"9bce927cce08e90910de385240fe76dd","permalink":"https://iblogging.github.io/post/2022-09-29-fpga/","publishdate":"2022-09-28T11:00:00Z","readingtime":1,"relpermalink":"/post/2022-09-29-fpga/","section":"post","summary":"Digital Hardware Design: Two approaches An introduction to FPGAs FPGAs Reconfigurable Mean not defined after manufacture, could be specified by the programmers themselves Configuration types Static Reconfiguration Load the whole bitstream on the FPGA Stop the execution to do the loading Static Partial Reconfiguration Only a portion of the bitstream is loaded on the FPGA Stop the execution to load the partial iage but the wait time is much shorter Dynamic Partial Reconfiguration Part of the FPGA is reconfigured while the rest is still running How is ensure reconfiguration?","tags":["FPGA"],"title":"Architecture of reconfigurable systems - FPGA","type":"post","url":"/post/2022-09-29-fpga/","weight":0,"wordcount":181},{"author":null,"categories":["FPGA"],"content":"Study Verilog - Part 1","date":1664359200,"description":"Study Verilog - Part 1","dir":"post/","excerpt_html":"Study Verilog - Part 1","excerpt_text":"Study Verilog - Part 1","expirydate":-62135596800,"fuzzywordcount":300,"html":"Study Verilog - Part 1","keywords":null,"kind":"page","lang":"en","lastmod":1664359200,"objectID":"a3d849107624ba9d420ef77b66cc1f9f","permalink":"https://iblogging.github.io/post/2022-09-29-verilog-part-1/","publishdate":"2022-09-28T10:00:00Z","readingtime":2,"relpermalink":"/post/2022-09-29-verilog-part-1/","section":"post","summary":"Introduction In the early days of integrated circuits, engineers had to sit down and physically draw transistors and their connections on paper to design them such that it can be fabricated on silicon.\nBigger and complex circuits demanded more engineers, time and other resources and soon enough there was a need to have a better way of designing integrated circuits.\nVHDL was soon developed to enhance the design process by allowing engineers to describe functionality of the desired hardware and let automation tools convert that behavior into actual hardware elements like combinational gates and sequential logic.","tags":["FPGA","Verilog","RTL"],"title":"Study Verilog - Part 1","type":"post","url":"/post/2022-09-29-verilog-part-1/","weight":0,"wordcount":299},{"author":null,"categories":null,"content":null,"date":1664323200,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1664323200,"objectID":"2f05902e7435de187bb5303fb74f55e2","permalink":"https://iblogging.github.io/post/readme/","publishdate":"2022-09-28T00:00:00Z","readingtime":1,"relpermalink":"/post/readme/","section":"post","summary":"TIPS 1. UML @startuml Alice -\u0026gt; Bob: Authentication Request Bob --\u0026gt; Alice: Authentication Response Alice -\u0026gt; Bob: Another authentication Request Alice \u0026lt;-- Bob: Another authentication Response @enduml 2. Mindmap Root Level 1 Level 2 Level 2 Level 3 Level 3 Level 4 Level 5 Level 6 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Table Type Meaning 0 represents a logic zero, or a false condition 1 represents a logic one, or a true condition x represents an unknown logic value (can be zero or one) z represents a high-impedance state Color Knowledge people must take responsibility for their own development and placement Add comments https://www.","tags":null,"title":"Setup","type":"post","url":"/post/readme/","weight":0,"wordcount":174},{"author":null,"categories":["FPGA"],"content":"FPGA designs with Verilog","date":1662030000,"description":"FPGA designs with Verilog","dir":"post/fpga/","excerpt_html":"FPGA designs with Verilog","excerpt_text":"FPGA designs with Verilog","expirydate":-62135596800,"fuzzywordcount":100,"html":"FPGA designs with Verilog","keywords":null,"kind":"page","lang":"en","lastmod":1662030000,"objectID":"c604758615159d3a9209e5bdc9136539","permalink":"https://iblogging.github.io/post/fpga/2022-10-01-fpga-designs-with-verilog/","publishdate":"2022-09-01T11:00:00Z","readingtime":0,"relpermalink":"/post/fpga/2022-10-01-fpga-designs-with-verilog/","section":"post","summary":"","tags":["FPGA"],"title":"FPGA designs with Verilog","type":"post","url":"/post/fpga/2022-10-01-fpga-designs-with-verilog/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://iblogging.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me ","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://iblogging.github.io/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/notes/","section":"","summary":"TIPS 1. UML @startuml\rAlice -\u0026gt; Bob: Authentication Request\rBob --\u0026gt; Alice: Authentication Response\rAlice -\u0026gt; Bob: Another authentication Request\rAlice \u0026lt;-- Bob: Another authentication Response\r@enduml 2. Mindmap Root Level 1 Level 2 Level 2 Level 3 Level 3 Level 4 Level 5 Level 6 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Level 1 Level 2 Level 2 Table Type Meaning 0 represents a logic zero, or a false condition 1 represents a logic one, or a true condition x represents an unknown logic value (can be zero or one) z represents a high-impedance state Color Knowledge people must take responsibility for their own development and placement Add comments https://www.","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":174},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://iblogging.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://iblogging.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]